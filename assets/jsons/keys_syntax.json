{  
    "keys": [
      {
        "name": "no-syntax",
        "syntax": "-",
        "description": "Self Explanatory"
      },
      {
        "name": "Number",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-number'>1</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-number'>-20</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_c</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-number'>5</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-operator'>,</span> <span class='cm-number'>-1</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> </div>",
        "description": "Used for integer values"
      },
      {
        "name": "Variable",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-number'>1</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-string'>\"\"</span><span class='cm-operator'>;</span></pre> </div>",
        "description": "Variable, used to store values, use and modify them later. Initialized to 0 by default."
      },
      {
        "name": "Custom Function",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-keyword'>function</span> <span class='cm-variable-2'>f1</span> <span class='cm-operator'>:</span> <span class='cm-variable'>var_a</span><span class='cm-operator'>,</span> <span class='cm-variable'>var_b</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-keyword'>return</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>*</span> <span class='cm-variable'>var_b</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> <pre class='CodeMirror-line'><span class='cm-variable-2'>f1</span><span class='cm-bracket'>(</span><span class='cm-atom'>input</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>input = 5, output = 15</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-operator'>,</span><span class='cm-number'>3</span><span class='cm-operator'>,</span><span class='cm-number'>4</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>map</span><span class='cm-bracket'>(</span><span class='cm-keyword'>function</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>-&gt;</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>*</span> <span class='cm-number'>2</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = </span><span class='cm-comment CodeMirror-matchingbracket'>[</span><span class='cm-comment'>4,6,8</span><span class='cm-comment CodeMirror-matchingbracket'>]</span></pre> </div>",
        "description": "Used for user-defined functions to perform custom operations when called. Note: beware of infinite recursion, make sure you have a base case for the recursion to exit."
      },
      {
        "name": "Alphabet",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-string'>\"a\"</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-string'>\"c\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"o\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"o\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"l\"</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_c</span> <span class='cm-operator'>=</span> <span class='cm-string'>\"nice\"</span><span class='cm-operator'>;</span></pre> </div>",
        "description": "Used for character/string values in conjunction with the \"\" operator."
      },
      {
        "name" : "{bksp}",
        "syntax": "Backspace",
        "description": "Pressing this button will not delete your code character by character, however it will delete the whole token, also when focused on the loop brackets it will delete the whole loop"
      },
      {
        "name": "{enter}",
        "syntax": "Enter",
        "description": "Goes to a new line. When writing a loop or condition, it goes inside the block. To go outside of the block, click outside the closing curly bracket and press enter."
      },
      {
        "name": "while",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-comment'>input = [1, 2, 3]</span></pre><pre class='CodeMirror-line'><span class='cm-keyword'>while</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>&lt;</span> <span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span> {</pre> <pre class='CodeMirror-line'>  <span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_b</span> <span class='cm-operator'>+</span> <span class='cm-atom'>input</span><span class='cm-bracket'>[</span><span class='cm-variable'>var_a</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>  <span class='cm-variable'>var_a</span><span class='cm-operator'>++;</span></pre> <pre class='CodeMirror-line'>}</pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 6</span></pre> </div>",
        "description": "Used to loop & perform a set of operators till the condition is truthy. Note: beware of infinite loops, make sure the condition eventually becomes false."
      },
      {
        "name": "if",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-keyword'>if</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>&gt;</span> <span class='cm-variable'>var_b</span>{</pre> <pre class='CodeMirror-line'> <span class='cm-keyword'>return</span> <span class='cm-atom'>true</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> </div>",
        "description": "Used to conditionally perform operations"
      },
      {
        "name": "else",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-keyword'>if</span> <span class='cm-variable'>var_b</span> <span class='cm-operator'>==</span> <span class='cm-atom'>input</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-variable'>var_c</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_c</span> <span class='cm-operator'>+</span> <span class='cm-variable'>var_b</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> <pre class='CodeMirror-line'><span class='cm-keyword'>else</span> <span class=' CodeMirror-matchingbracket'>{</span></pre> <pre class='CodeMirror-line'> <span class='cm-variable'>var_c</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_c</span> <span class='cm-operator'>-</span> <span class='cm-variable'>var_b</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> </div>",
        "description": "Used in conjunction with if block. Only executed when the if condition equates to false"
      },
      {
        "name": "foreach",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-comment'>input = [2, 4, 6]</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>foreach</span> <span class='cm-variable'>var_a</span> <span class='cm-keyword'>in</span> <span class='cm-atom'>input</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_b</span> <span class='cm-operator'>+</span> <span class='cm-variable-2'>pow</span><span class='cm-bracket'>(</span><span class='cm-variable'>var_a</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>} <span class='cm-comment'>var_b = 56</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>foreach</span> <span class='cm-variable'>var_c</span> <span class='cm-keyword'>in</span> <span class='cm-bracket'>[</span><span class='cm-number'>5</span><span class='cm-operator'>,</span> <span class='cm-number'>10</span><span class='cm-operator'>,</span> <span class='cm-number'>15</span><span class='cm-bracket'>]</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-variable'>var_b</span><span class='cm-operator'>.</span><span class='cm-variable-2'>push</span><span class='cm-bracket'>(</span><span class='cm-variable-2'>mod</span><span class='cm-bracket'>(</span><span class='cm-variable'>var_c</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>))</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>} <span class='cm-comment'>var_b = [1, 0, 1]</span></pre> </div>",
        "description": "The foreach loop is used to iterate over a list, the value is stored in the variable before in keyword"
      },
      {
        "name": "return",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-keyword'>return</span> <span class='cm-operator'>-</span> <span class='cm-atom'>input</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>return</span> <span class='cm-atom'>true</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>return</span> <span class='cm-number'>-1</span><span class='cm-operator'>;</span></pre> </div>",
        "description": "Used to return (a value) from a function or program"
      },
      {
        "name": "function",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-keyword'>function</span> <span class='cm-variable-2'>f1</span> <span class='cm-operator'>:</span> <span class='cm-variable'>var_a</span><span class='cm-operator'>,</span> <span class='cm-variable'>var_b</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-keyword'>return</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>+</span> <span class='cm-variable'>var_b</span> <span class='cm-operator'>*</span> <span class='cm-variable'>var_b</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> <pre class='CodeMirror-line'><span class='cm-variable-2'>f1</span><span class='cm-bracket'>(</span><span class='cm-atom'>input</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = 5, output = 14</span></pre> </div>",
        "description": "Used to define custom & anonymous functions"
      },
      {
        "name": "true",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-atom'>true</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-atom'>true</span><span class='cm-operator'>,</span> <span class='cm-atom'>true</span><span class='cm-operator'>,</span> <span class='cm-atom'>true</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>return</span> <span class='cm-atom'>true</span><span class='cm-operator'>;</span></pre> </div>",
        "description": "Boolean value for not false"
      },
      {
        "name": "false",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-atom'>false</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-atom'>false</span><span class='cm-operator'>,</span> <span class='cm-atom'>false</span><span class='cm-operator'>,</span> <span class='cm-atom'>false</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>return</span> <span class='cm-atom'>false</span><span class='cm-operator'>;</span></pre> </div>",
        "description": "Boolean value for not true"
      },
      {
        "name": ";",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-number'>3</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[]</span><span class='cm-operator'>;</span></pre> </div>",
        "description": "Used as a delimiter for non-block lines. Note: optional for the sole or last line of the program/function."
      },
      {
        "name": "abs",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable-2'>abs</span><span class='cm-bracket'>(</span><span class='cm-variable'>var_a</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>var_a = -5, output = 5</span></pre> <pre class='CodeMirror-line'><span class='cm-variable-2'>abs</span><span class='cm-bracket'>(</span><span class='cm-number'>-12</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 12</span></pre> </div>",
        "description": "Returns the absolute (non-negative) value"
      },
      {
        "name": "mod",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable-2'>mod</span><span class='cm-bracket'>(</span><span class='cm-variable'>var_a</span><span class='cm-operator'>,</span> <span class='cm-number'>10</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>var_a = 88, output = 8</span></pre> <pre class='CodeMirror-line'><span class='cm-variable-2'>mod</span><span class='cm-bracket'>(</span><span class='cm-number'>5</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 1</span></pre> </div>",
        "description": "Returns the remainder from first parameter divided by second parameter"
      },
      {
        "name": "max",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable-2'>max</span><span class='cm-bracket'>(</span><span class='cm-number'>0</span><span class='cm-operator'>,</span> <span class='cm-variable'>var_a</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>var_a = -8, output = 0</span></pre> <pre class='CodeMirror-line'><span class='cm-variable-2'>max</span><span class='cm-bracket'>(</span><span class='cm-number'>5</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 5</span></pre> </div>",
        "description": "Returns the larger value out of first and second parameter"
      },
      {
        "name": "min",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable-2'>min</span><span class='cm-bracket'>(</span><span class='cm-number'>6</span><span class='cm-operator'>,</span> <span class='cm-variable'>var_a</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>var_a = 8, output = 6</span></pre> <pre class='CodeMirror-line'><span class='cm-variable-2'>min</span><span class='cm-bracket'>(</span><span class='cm-number'>0</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 0</span></pre> </div>",
        "description": "Returns the smaller value out of first and second parameter"
      },
      {
        "name": "pow",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable-2'>pow</span><span class='cm-bracket'>(</span><span class='cm-number'>3</span><span class='cm-operator'>,</span> <span class='cm-variable'>var_a</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>var_a = 2, output = 9</span></pre> <pre class='CodeMirror-line'><span class='cm-variable-2'>pow</span><span class='cm-bracket'>(</span><span class='cm-number'>10</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 1000</span></pre> </div>",
        "description": "Returns first parameter raised to second parameter"
      },
      {
        "name": "length",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span><span class='cm-operator'>;</span> <span class='cm-comment'>input = [4,6], output = 2</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>3</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span><span class='cm-bracket'>()</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 1</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span><span class='cm-operator'>;</span> <span class='cm-comment'>var_a = \"ok\", output = 2</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"okay\"</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 4</span></pre> </div>",
        "description": "Returns the length of a list"
      },
      {
        "name": "is_list",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>is_list</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = [4,6,8], output = true</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-operator'>.</span><span class='cm-variable-2'>is_list</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = 3, output = false</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-string'>\"o\"</span><span class='cm-operator'>,</span><span class='cm-string'>\"k\"</span><span class='cm-operator'>,</span><span class='cm-string'>\"a\"</span><span class='cm-operator'>,</span><span class='cm-string'>\"y\"</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>is_list</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = true</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"okay\"</span><span class='cm-operator'>.</span><span class='cm-variable-2'>is_list</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = false</span></pre> </div>",
        "description": "Returns a boolean to check whether the value is a list"
      },
      {
        "name": "push",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>push</span><span class='cm-bracket'>(</span><span class='cm-string'>\"d\"</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = [\"a\",\"b\",\"c\"],</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [\"a\",\"b\",\"c\",\"d\"]</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>1</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-operator'>,</span> <span class='cm-number'>5</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>push</span><span class='cm-bracket'>(</span><span class='cm-number'>7</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [1, 3, 5, 7]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-operator'>.</span><span class='cm-variable-2'>push</span><span class='cm-bracket'>([</span><span class='cm-number'>1</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-bracket'>[</span><span class='cm-number'>3</span><span class='cm-bracket'>]])</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = [], output = [[1, 2, [3]]]</span></pre> </div>",
        "description": "Push a value at the end of a list"
      },
      {
        "name": "pop",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>pop</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = [\"a\",\"b\",\"c\"], output = \"c\"</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>4</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>pop</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 2</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[[]</span><span class='cm-operator'>,</span> <span class='cm-bracket'>[[</span><span class='cm-number'>2</span><span class='cm-bracket'>]]]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>pop</span><span class='cm-bracket'>()</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = </span><span class='cm-comment CodeMirror-matchingbracket'>[</span><span class='cm-comment'>[2]</span><span class='cm-comment CodeMirror-matchingbracket'>]</span></pre> </div>",
        "description": "Remove the last element from the list. Note: can't pop from a blank list."
      },
      {
        "name": "insert",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-operator'>,</span> <span class='cm-number'>4</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>insert</span><span class='cm-bracket'>(</span><span class='cm-number'>0</span><span class='cm-operator'>,</span> <span class='cm-number'>1</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [1, 2, 3, 4]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-operator'>.</span><span class='cm-variable-2'>insert</span><span class='cm-bracket'>(</span><span class='cm-number'>1</span><span class='cm-operator'>,</span> <span class='cm-string'>\"k\"</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = [\"o\",\"a\",\"y\"], </span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [\"o\",\"k\",\"a\",\"y\"]</span></pre> </div>",
        "description": "Inserts a value (second parameter) at the given index (first parameter). Note: if the list is blank, the element gets inserted at first index, regardless of the index specified."
      },
      {
        "name": "remove",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-operator'>,</span> <span class='cm-number'>4</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>remove</span><span class='cm-bracket'>(</span><span class='cm-number'>1</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [2, 4]</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-string'>\"o\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"k\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"a\"</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>remove</span><span class='cm-bracket'>(</span><span class='cm-number'>2</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = </span><span class='cm-comment CodeMirror-matchingbracket'>[</span><span class='cm-comment'>\"o\", \"k\"</span><span class='cm-comment CodeMirror-matchingbracket'>]</span></pre> </div>",
        "description": "Removes the value at the index provided. Note: can't remove from a blank list."
      },
      {
        "name": "sort",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>sort</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = [4, 3, 2, 1], </span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [1, 2, 3, 4]</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-string'>\"z\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"y\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"x\"</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>sort</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [\"x\", \"y\", \"z\"]</span></pre> </div>",
        "description": "Sorts a list of integers or of strings in an ascending order"
      },
      {
        "name": "sort_with",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-number'>1</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-operator'>.</span><span class='cm-variable-2'>sort_with</span><span class='cm-bracket'>(</span><span class='cm-keyword'>function</span> <span class='cm-variable'>var_a</span><span class='cm-operator'>,</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>-&gt;</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>&gt;</span> <span class='cm-variable'>var_b</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [3,2,1]</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>function</span> <span class='cm-variable-2'>f1</span> <span class='cm-operator'>:</span> <span class='cm-variable'>var_a</span><span class='cm-operator'>,</span> <span class='cm-variable'>var_b</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-variable'>var_a</span> <span class='cm-operator'>&gt;</span> <span class='cm-variable'>var_b</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-string'>\"q\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"p\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"r\"</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>sort_with</span><span class='cm-bracket'>(</span><span class='cm-variable-2'>f1</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [\"r\",\"q\",\"p\"]</span></pre> </div>",
        "description": "Provides an anonymous function for a custom sorting function. For example: descending sort."
      },
      {
        "name": "copy",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-atom'>input</span><span class='cm-operator'>;</span> <span class='cm-comment'>input = [4,3,2,1]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-operator'>.</span><span class='cm-variable-2'>remove</span><span class='cm-bracket'>(</span><span class='cm-number'>1</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input becomes [4,2,1]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>copy</span><span class='cm-operator'>;</span> <span class='cm-comment'>input = [4,2,1]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-operator'>.</span><span class='cm-variable-2'>remove</span><span class='cm-bracket'>(</span><span class='cm-number'>1</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input doesn't change i.e. [4,2,1], </span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = [4,1]</span></pre> </div>",
        "description": "Since = operator points by reference, the copy method is used to copy the value without referencing"
      },
      {
        "name": "new_list",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-variable-2'>new_list</span><span class='cm-bracket'>(</span><span class='cm-number'>0</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = []</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-variable-2'>new_list</span><span class='cm-bracket'>(</span><span class='cm-number'>3</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_b = [0, 0, 0]</span></pre> </div>",
        "description": "Function used to create a new list of number of elements provided. All elements are initialized to 0."
      },
      {
        "name": "fill",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-variable-2'>new_list</span><span class='cm-bracket'>(</span><span class='cm-number'>2</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = [0, 0]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_a</span><span class='cm-operator'>.</span><span class='cm-variable-2'>fill</span><span class='cm-bracket'>(</span><span class='cm-number'>3</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_b = [3, 3]</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>1</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>fill</span><span class='cm-bracket'>(</span><span class='cm-number'>5</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [5, 5, 5]</span></pre> </div>",
        "description": "Function used to initialize a list with the value provided"
      },
      {
        "name": "map",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-operator'>,</span><span class='cm-number'>3</span><span class='cm-operator'>,</span><span class='cm-number'>4</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>map</span><span class='cm-bracket'>(</span><span class='cm-keyword'>function</span> <span class='cm-variable'>var_a</span> </pre> <pre class='CodeMirror-line'><span class='cm-operator'>-&gt;</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>*</span> <span class='cm-number'>3</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>[6, 9, 12]</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>function</span> <span class='cm-variable-2'>f1</span> <span class='cm-operator'>:</span> <span class='cm-variable'>var_a</span>{</pre> <pre class='CodeMirror-line'> <span class='cm-keyword'>return</span> <span class='cm-variable-2'>pow</span><span class='cm-bracket'>(</span><span class='cm-variable'>var_a</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>3</span><span class='cm-operator'>,</span> <span class='cm-number'>4</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>map</span><span class='cm-bracket'>(</span><span class='cm-variable-2'>f1</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment CodeMirror-matchingbracket'>[</span><span class='cm-comment'>27,64</span><span class='cm-comment CodeMirror-matchingbracket'>]</span></pre> </div>",
        "description": "Function used to iterate over a list and replace its values"
      },
      {
        "name": "input",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-comment'>input = 3</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-atom'>input</span> <span class='cm-operator'>+</span> <span class='cm-number'>4</span><span class='cm-operator'>;</span> <span class='cm-comment'>output = 7</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = [3, 5, 7]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>push</span><span class='cm-bracket'>(</span><span class='cm-number'>9</span><span class='cm-bracket'>)</span><span class='cm-operator'>.</span><span class='cm-variable-2'>remove</span><span class='cm-bracket'>(</span><span class='cm-number'>0</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_b = [5, 7, 9]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_c</span> <span class='cm-operator'>=</span> <span class='cm-atom'>input</span> <span class='cm-operator'>+</span> <span class='cm-string'>\"b\"</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = \"a\", var_c = \"ab\"</span></pre> <pre class='CodeMirror-line'><span class='cm-atom'>input</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-number'>3</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_d</span> <span class='cm-operator'>=</span> <span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>pop</span><span class='cm-operator'>;</span> <span class='cm-comment'>input = </span><span class='cm-comment CodeMirror-matchingbracket'>[</span><span class='cm-comment'>2</span><span class='cm-comment CodeMirror-matchingbracket'>]</span></pre> </div>",
        "description": "The test case input values are stored in the input variable one at a time while executing your program with the puzzle's test cases."
      },
      {
        "name": "in",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-keyword'>foreach</span> <span class='cm-variable'>var_a</span> <span class='cm-keyword'>in</span> <span class='cm-atom'>input</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-comment'>input = [2, 4, 6]</span></pre> <pre class='CodeMirror-line'> <span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_b</span> <span class='cm-operator'>+</span> <span class='cm-variable-2'>pow</span><span class='cm-bracket'>(</span><span class='cm-variable'>var_a</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>} <span class='cm-comment'>var_b = 56</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>foreach</span> <span class='cm-variable'>var_c</span> <span class='cm-keyword'>in</span> <span class='cm-bracket'>[</span><span class='cm-number'>5</span><span class='cm-operator'>,</span><span class='cm-number'>10</span><span class='cm-operator'>,</span><span class='cm-number'>15</span><span class='cm-bracket'>]</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-variable'>var_b</span><span class='cm-operator'>.</span><span class='cm-variable-2'>push</span><span class='cm-bracket'>(</span><span class='cm-variable-2'>mod</span><span class='cm-bracket'>(</span><span class='cm-variable'>var_c</span><span class='cm-operator'>,</span><span class='cm-number'>2</span><span class='cm-bracket'>))</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>} <span class='cm-comment'>var_b = </span><span class='cm-comment CodeMirror-matchingbracket'>[</span><span class='cm-comment'>1, 0, 1</span><span class='cm-comment CodeMirror-matchingbracket'>]</span></pre> </div>",
        "description": "Keyword used with foreach to iterate over a list"
      },
      {
        "name": "=",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-comment'>input = 5;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-atom'>input</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span><span class='cm-operator'>;</span> <span class='cm-comment'>5</span></pre> <pre class='CodeMirror-line'></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>+</span> <span class='cm-number'>1</span><span class='cm-operator'>;</span> <span class='cm-comment'>6</span></pre></div>",
        "description": "Assignment operator. Note: lists are stored by reference, so use copy function if you don't want to modify the right operand by future left operand operations."
      },
      {
        "name": "+",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-number'>4</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>+</span> <span class='cm-number'>5</span><span class='cm-operator'>;</span> <span class='cm-comment'>9</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-string'>\"a\"</span> <span class='cm-operator'>+</span> <span class='cm-string'>\"b\"</span><span class='cm-operator'>;</span> <span class='cm-comment'>\"ab\"</span></pre> </div>",
        "description": "Addition operator. Left operand plus right operand."
      },
      {
        "name": "-",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-number'>4</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>-</span> <span class='cm-number'>1</span><span class='cm-operator'>;</span> <span class='cm-comment'>3</span></pre></div>",
        "description": "Subtraction operator. Left operand minus right operand."
      },
      {
        "name": "*",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-number'>3</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>*</span> <span class='cm-number'>2</span><span class='cm-operator'>;</span> <span class='cm-comment'>6</span></pre> </div>",
        "description": "Multiplication operator. Left operand multiplied by right operand."
      },
      {
        "name": "/",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-number'>14</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>/</span> <span class='cm-number'>2</span><span class='cm-operator'>;</span> <span class='cm-comment'>7</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_c</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_b</span> <span class='cm-operator'>/</span> <span class='cm-number'>3</span><span class='cm-operator'>;</span> <span class='cm-comment'>2</span></pre> </div>",
        "description": "Division operator. Left operand divided by right operand."
      },
      {
        "name": "++",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-number'>2</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-operator'>++;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = 3</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_a</span><span class='cm-operator'>++;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = 4, var_b = 3</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_c</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_b</span><span class='cm-operator'>++</span> <span class='cm-operator'>+</span> <span class='cm-number'>2</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_b = 4, var_c = 5</span></pre> </div>",
        "description": "Increments operator used to postfix increment a value. Returns first, increments later."
      },
      {
        "name": "--",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-number'>4</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-operator'>--;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = 3</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_a</span><span class='cm-operator'>--;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = 2, var_b = 3</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_c</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_b</span><span class='cm-operator'>--</span> <span class='cm-operator'>-</span> <span class='cm-number'>2</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_b = 2, var_c = 1</span></pre> </div>",
        "description": "Decrement operator used to postfix decrement a value. Returns first, decrements later."
      },
      {
        "name": "(",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-comment'>input = [1, 3, 7]</span></pre> <pre class='CodeMirror-line'><span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>insert</span><span class='cm-bracket'>(</span><span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>5</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>if</span> <span class='cm-bracket'>(</span><span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span> <span class='cm-operator'>&gt;</span> <span class='cm-number'>2</span><span class='cm-bracket'>)</span></span> <span class=' CodeMirror-matchingbracket'>{</span></pre> <pre class='CodeMirror-line'> <span class='cm-keyword'>return</span> <span class='cm-atom'>true</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class=' CodeMirror-matchingbracket'>}</span></pre> </div>",
        "description": "Opening round bracket used with functions or to prioritize expressions"
      },
      {
        "name": ")",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-comment'>input = [1, 3, 7]</span></pre> <pre class='CodeMirror-line'><span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>insert</span><span class='cm-bracket'>(</span><span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>5</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-keyword'>if</span> <span class='cm-bracket'>(</span><span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span> <span class='cm-operator'>&gt;</span> <span class='cm-number'>2</span><span class='cm-bracket'>)</span></span> <span class=' CodeMirror-matchingbracket'>{</span></pre> <pre class='CodeMirror-line'> <span class='cm-keyword'>return</span> <span class='cm-atom'>true</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class=' CodeMirror-matchingbracket'>}</span></pre> </div>",
        "description": "Closing round bracket used with functions or to prioritize expressions"
      },
      {
        "name": "[",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-comment'>input = [1, 3, 7]</span></pre> <pre class='CodeMirror-line'><span class='cm-atom'>input</span><span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-bracket'>]</span> <span class='cm-operator'>=</span> <span class='cm-number'>5</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = [1, 3, 5]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[[</span><span class='cm-number'>0</span><span class='cm-bracket'>]</span><span class='cm-operator'>,</span> <span class='cm-bracket'>[[</span><span class='cm-number'>2</span><span class='cm-bracket'>]</span><span class='cm-operator'>,</span> <span class='cm-bracket'>[</span><span class='cm-number'>3</span><span class='cm-bracket'>]]]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-bracket'>[</span><span class='cm-number'>0</span><span class='cm-bracket'>]</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-number'>1</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = [[1], [[2], [3]]]</span></pre> </div>",
        "description": "Opening square bracket used to access a list's index"
      },
      {
        "name": "]",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-comment'>input = [1, 3, 7]</span></pre> <pre class='CodeMirror-line'><span class='cm-atom'>input</span><span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-bracket'>]</span> <span class='cm-operator'>=</span> <span class='cm-number'>5</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>input = [1, 3, 5]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[[</span><span class='cm-number'>0</span><span class='cm-bracket'>]</span><span class='cm-operator'>,</span> <span class='cm-bracket'>[[</span><span class='cm-number'>2</span><span class='cm-bracket'>]</span><span class='cm-operator'>,</span> <span class='cm-bracket'>[</span><span class='cm-number'>3</span><span class='cm-bracket'>]]]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span><span class='cm-bracket'>[</span><span class='cm-number'>0</span><span class='cm-bracket'>]</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-number'>1</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = [[1], [[2], [3]]]</span></pre> </div>",
        "description": "Closing square bracket used to access a list's index"
      },
      {
        "name": "{",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-keyword'>if</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>&lt;</span> <span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-keyword'>return</span> <span class='cm-atom'>false</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> </div>",
        "description": "Opening curly braces used with if, else, foreach, while, function"
      },
      {
        "name": "}",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-keyword'>if</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>&lt;</span> <span class='cm-atom'>input</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-keyword'>return</span> <span class='cm-atom'>false</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> </div>",
        "description": "Closing curly braces used with if, else, foreach, while, function"
      },
      {
        "name": "==",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>4</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span> <span class='cm-operator'>==</span> <span class='cm-number'>2</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"okay\"</span> <span class='cm-operator'>==</span> <span class='cm-string'>\"ok\"</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"true\"</span> <span class='cm-operator'>==</span> <span class='cm-atom'>true</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> <pre class='CodeMirror-line'><span class='cm-number'>1</span> <span class='cm-operator'>==</span> <span class='cm-number'>1</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"10\"</span> <span class='cm-operator'>==</span> <span class='cm-number'>10</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>1</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>]</span> <span class='cm-operator'>==</span> <span class='cm-bracket'>[</span><span class='cm-number'>1</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>]</span> <span class='cm-comment'>true</span></pre></div>",
        "description": "True if left operand is equal to right operand"
      },
      {
        "name": "!=",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>4</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span> <span class='cm-operator'>!=</span> <span class='cm-number'>2</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"okay\"</span> <span class='cm-operator'>!=</span> <span class='cm-string'>\"ok\"</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"true\"</span> <span class='cm-operator'>!=</span> <span class='cm-atom'>true</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-number'>1</span> <span class='cm-operator'>!=</span> <span class='cm-number'>1</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"10\"</span> <span class='cm-operator'>!=</span> <span class='cm-number'>10</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>1</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>]</span> <span class='cm-operator'>!=</span> <span class='cm-bracket'>[</span><span class='cm-number'>1</span><span class='cm-operator'>,</span> <span class='cm-number'>2</span><span class='cm-bracket'>]</span> <span class='cm-comment'>false</span></pre></div>",
        "description": "True if left operand is not equal to right operand"
      },
      {
        "name": "<",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-string'>\"b\"</span> <span class='cm-operator'>&lt;</span> <span class='cm-string'>\"a\"</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"ab\"</span> <span class='cm-operator'>&lt;</span> <span class='cm-string'>\"aa\"</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> <pre class='CodeMirror-line'><span class='cm-number'>2</span> <span class='cm-operator'>&lt;</span> <span class='cm-number'>4</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre></div>",
        "description": "True if left operand is lesser than right operand"
      },
      {
        "name": ">",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-string'>\"b\"</span> <span class='cm-operator'>&gt;</span> <span class='cm-string'>\"a\"</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-string'>\"ab\"</span> <span class='cm-operator'>&gt;</span> <span class='cm-string'>\"aa\"</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> <pre class='CodeMirror-line'><span class='cm-number'>2</span> <span class='cm-operator'>&gt;</span> <span class='cm-number'>2</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre></div>",
        "description": "True if left operand is greater than right operand"
      },
      {
        "name": "&&",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-atom'>true</span> <span class='cm-operator'>&amp;&amp;</span> <span class='cm-atom'>false</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> <pre class='CodeMirror-line'><span class='cm-number'>1</span> <span class='cm-operator'>&gt;</span> <span class='cm-number'>0</span> <span class='cm-operator'>&amp;&amp;</span> <span class='cm-number'>2</span> <span class='cm-operator'>&lt;</span> <span class='cm-number'>3</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> </div>",
        "description": "AND operator. True if both of the operands are true"
      },
      {
        "name": "||",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-atom'>true</span> <span class='cm-operator'>||</span> <span class='cm-atom'>false</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-number'>1</span> <span class='cm-operator'>&gt;</span> <span class='cm-number'>0</span> <span class='cm-operator'>||</span> <span class='cm-number'>2</span> <span class='cm-operator'>&gt;</span> <span class='cm-number'>3</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-atom'>false</span> <span class='cm-operator'>||</span> <span class='cm-atom'>false</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> </div>",
        "description": "OR operator. true if either one of the operands is true"
      },
      {
        "name": "!",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-operator'>!</span> <span class='cm-atom'>false</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-operator'>!</span> <span class='cm-bracket'>(</span><span class='cm-number'>2</span> <span class='cm-operator'>&gt;</span> <span class='cm-number'>3</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>true</span></pre> <pre class='CodeMirror-line'><span class='cm-operator'>!</span> <span class='cm-bracket'>(</span><span class='cm-string'>\"a\"</span> <span class='cm-operator'>==</span> <span class='cm-string'>\"a\"</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span> <span class='cm-comment'>false</span></pre> </div>",
        "description": "NOT operator. Used to negate a boolean value"
      },
      {
        "name": ".",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>4</span><span class='cm-operator'>,</span> <span class='cm-number'>6</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>push</span><span class='cm-bracket'>(</span><span class='cm-number'>8</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_a = [2,4,6,8]</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-variable'>var_a</span><span class='cm-operator'>.</span><span class='cm-variable-2'>length</span><span class='cm-operator'>;</span> <span class='cm-comment'>var_b = 4</span></pre> </div>",
        "description": "Dot operator is used for performing functions on a variable/value"
      },
      {
        "name": ",",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-operator'>,</span> <span class='cm-number'>3</span><span class='cm-operator'>,</span> <span class='cm-number'>4</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-string'>\"\"</span><span class='cm-operator'>,</span> <span class='cm-variable'>var_a</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_b = [\"\", [2, 3, 4]]</span></pre> </div>",
        "description": "Comma is used to separate list elements or function parameters"
      },
      {
        "name": ":",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-keyword'>function</span> <span class='cm-variable-2'>f1</span> <span class='cm-operator'>:</span> <span class='cm-variable'>var_a</span><span class='cm-operator'>,</span> <span class='cm-variable'>var_b</span> {</pre> <pre class='CodeMirror-line'> <span class='cm-keyword'>return</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>+</span> <span class='cm-variable'>var_b</span> <span class='cm-operator'>*</span> <span class='cm-variable'>var_b</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'>}</pre> </div>",
        "description": "Colon is used used while declaring custom functions"
      },
      {
        "name": "\"",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-variable'>var_a</span> <span class='cm-operator'>=</span> <span class='cm-string'>\"\"</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-variable'>var_b</span> <span class='cm-operator'>=</span> <span class='cm-bracket'>[</span><span class='cm-variable'>var_a</span><span class='cm-operator'>,</span> <span class='cm-string'>\"a\"</span><span class='cm-operator'>,</span> <span class='cm-string'>\"bcd\"</span><span class='cm-bracket'>]</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>var_b = [\"\", \"a\", \"bcd\"]</span></pre> </div>",
        "description": "Quotes are used used for characters and strings"
      },
      {
        "name": "->",
        "syntax": "<div class='CodeMirror-code cm-s-custom' style='background: unset'> <pre class='CodeMirror-line'><span class='cm-bracket'>[</span><span class='cm-number'>2</span><span class='cm-operator'>,</span><span class='cm-number'>3</span><span class='cm-operator'>,</span><span class='cm-number'>4</span><span class='cm-bracket'>]</span><span class='cm-operator'>.</span><span class='cm-variable-2'>map</span><span class='cm-bracket'>(</span><span class='cm-keyword'>function</span> <span class='cm-variable'>var_a</span> <span class='cm-operator'>-&gt;</span></pre> <pre class='CodeMirror-line'> <span class='cm-variable'>var_a</span> <span class='cm-operator'>*</span> <span class='cm-number'>2</span><span class='cm-bracket'>)</span><span class='cm-operator'>;</span></pre> <pre class='CodeMirror-line'><span class='cm-comment'>output = [4, 6, 8]</span></pre> </div>",
        "description": "Arrow is used to declare an anonymous function"
      }
    ]
  }